plugins {
    id 'java'
    id 'maven-publish'
}
import groovy.json.JsonSlurper

ext.targets = ["linux", "win", "osx"]
ext.json = file("latest.json")

group = 'club.minnced'
version = getGitVersion()

static def getGitVersion() {
    def out = "git tag -l".execute().text
    def lines = out.split("\n")
    return lines[lines.length - 1]
}

def downloadZip(url) {
    println("Downloading zip $url")
    if (url.contains("linux")) {
        "wget -O linux/dist.zip $url".execute().waitFor()
    }
    else if (url.contains("win")) {
        "wget -O win/dist.zip $url".execute().waitFor()
    }
    else if (url.contains("osx")) {
        "wget -O osx/dist.zip $url".execute().waitFor()
    }
    else {
        println("Failed to identify os")
    }
}

def parse() {
    def jsonSlurper = new JsonSlurper()
    def object = jsonSlurper.parseText(json.text)

    assert object instanceof Map

    targets.each {
        file(it).mkdir()
    }

    def assets = object["assets"]
    assets.each {
        downloadZip(it["browser_download_url"])
    }
}

ext.unzipTasks = []

def setupTasks() {
    task parseLatest << {
        parse()
    }

    targets.each {
        Copy copy = tasks.create(name: "unzip_$it", type: Copy)

        copy.from zipTree("$it/dist.zip")
        copy.into it
    }

    task(unzipArchives)
    unzipArchives.dependsOn parseLatest
    targets.each {
        Copy copy = tasks["unzip_$it"]
        unzipArchives.dependsOn copy
        copy.mustRunAfter parseLatest
    }
}

task setup {
    mustRunAfter clean
    if (json.exists()) {
        setupTasks()
        dependsOn parseLatest
        dependsOn unzipArchives
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from "src/main/java"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

def getProjectProperty(String key) {
    return hasProperty(key) ? this.properties[key] : ''
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version

            artifact javadocJar
            artifact sourcesJar
        }
    }
}

build {
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar

    jar.mustRunAfter sourcesJar
    javadocJar.mustRunAfter sourcesJar
}
