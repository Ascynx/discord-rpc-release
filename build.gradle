import groovy.json.JsonSlurper

apply plugin: 'java'

build {
    dependsOn jar
}

ext.targets = ["linux", "win", "osx"]
ext.json = file("latest.json")

def downloadZip(url) {
    println("Downloading zip $url")
    if (url.contains("linux")) {
        "wget -O linux/dist.zip $url".execute().waitFor()
    }
    else if (url.contains("win")) {
        "wget -O win/dist.zip $url".execute().waitFor()
    }
    else if (url.contains("osx")) {
        "wget -O osx/dist.zip $url".execute().waitFor()
    }
    else {
        println("Failed to identify os")
    }
}

def parse() { 
    def jsonSlurper = new JsonSlurper()
    def object = jsonSlurper.parseText(json.text)

    assert object instanceof Map
    
    targets.each {
        file(it).mkdir()
    }
    
    def assets = object["assets"]
    assets.each {
        downloadZip(it["browser_download_url"])
    }

    file("tag_name.txt").text = object["tag_name"]
}

ext.unzipTasks = []

def setupTasks() {
    task parseLatest { 
        doFirst { 
            parse()
        }
    }

    targets.each {
        Copy copy = tasks.create(name: "unzip_$it", type: Copy) 

        copy.from zipTree("$it/dist.zip")
        copy.into it
    }

    task(unzipArchives)
    unzipArchives.dependsOn parseLatest
    targets.each {
        Copy copy = tasks["unzip_$it"]
        unzipArchives.dependsOn copy
        copy.mustRunAfter parseLatest
    }
}

task setup {
    mustRunAfter clean
    if (json.exists()) {  
        setupTasks()
        dependsOn parseLatest
        dependsOn unzipArchives
    }
}
